/*
 * Copyright 2019 Side Effects Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Produced by:
 *	Side Effects Software Inc.
 *	123 Front Street West, Suite 1401
 *	Toronto, Ontario
 *      Canada   M5J 2M2
 *	416-504-9876
 *
 */

#ifndef __HUSD_LockedStageRegistry_h__
#define __HUSD_LockedStageRegistry_h__

#include "HUSD_API.h"
#include "HUSD_LockedStage.h"
#include <UT/UT_StringMap.h>
#include <utility>

class GU_PackedImpl;

// This singleton class is used to generate safely locked, unalterable copies
// of stages generated by LOP nodes. This is primarily for LOP nodes that
// introduce references to the stages output from other LOP nodes. See the
// HUSD_LockedStage class for more information.
class HUSD_API HUSD_LockedStageRegistry
{
public:
    static HUSD_LockedStageRegistry &getInstance();

    // This function isd called by GusdGU_PackedUSD to track all packed USD
    // prims so we can ensure that any packed USD prims that point to LOP node
    // stages keep alive a shared pointer to that locked stage as long as the
    // packed primitive exists.
    static void packedUSDTracker(const GU_PackedImpl *prim, bool create);

    // Exit callback used to clean up the locked stage tracker objects at a
    // predicatable time during shutdown, rather than relying on static object
    // destruction ordering.
    static void exitCallback(void *);

    HUSD_LockedStagePtr		 getLockedStage(int nodeid,
					const HUSD_DataHandle &data,
					bool strip_layers,
                                        fpreal t,
					HUSD_StripLayerResponse response);
    void			 clearLockedStage(int nodeid);

private:
				 HUSD_LockedStageRegistry();
				~HUSD_LockedStageRegistry();

    // Locked stages are identified by a string generateed from the stage
    // cook time and a bool flag indicating whether that node's stage was
    // flattened with or without layers from above layer breaks stripped out.
    // Use a weak pointer so that we can track the life of the locked stage
    // pointer accurately. Keeping a shared pointer in this structure would
    // mean the locked stage would never be deleted.
    typedef UT_StringMap<HUSD_LockedStageWeakPtr> LockedStageMap;

    // A map from the LOP node id to the locked stage map for that LOP node.
    // Each LOP node may have any number of locked stages active at the same
    // time, depending on the range of time samples for which the LOP has been
    // cooked.
    UT_Map<int, LockedStageMap> myLockedStageMaps;
};

#endif

